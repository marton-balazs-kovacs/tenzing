% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ValidateOutput.R
\name{ValidateOutput}
\alias{ValidateOutput}
\title{ValidateOutput Class for Contributors Table Validation}
\description{
ValidateOutput Class for Contributors Table Validation

ValidateOutput Class for Contributors Table Validation
}
\details{
The \code{ValidateOutput} class runs both \strong{column-based validation} (ensuring required columns exist)
and \strong{data-based validation} (checking correctness of values) for a contributors table.

It integrates two validation classes:
\itemize{
\item \strong{\code{\link{ColumnValidator}}}: Ensures required columns are present.
\item \strong{\code{\link{Validator}}}: Runs content-based validation checks on contributor data.
}

This validation process is \strong{configured via a YAML file}. The \verb{inst/config/} package di contains predefined YAML configuration files
for each of the six output types.
}
\section{Column Validation}{

The \code{ColumnValidator} ensures that required columns exist \strong{before running data-based checks}.
If a required column is missing, \strong{validation stops immediately} with an error.

Example YAML Configuration (\code{inst/config/title_validation.yaml}):
\preformatted{
column_config:
  rules:
    minimal:
      operator: "AND"
      columns:
        - Firstname
        - Middle name
        - Surname
        - Order in publication
      severity: "error"

    affiliation:
      operator: "OR"
      columns:
        - Primary affiliation
        - Secondary affiliation
      regex: "^Affiliation [0-9]+$"
      severity: "error"

    title:
      operator: "AND"
      columns:
        - Corresponding author?
        - Email address
      severity: "warning"
}
}

\section{General Data Validation}{

The \code{Validator} runs content-based validation checks \strong{after} column validation passes.

Example Validation Configuration (\code{inst/config/title_validation.yaml}):
\preformatted{
validation_config:
  validations:
    - name: check_missing_order
    - name: check_duplicate_order
    - name: check_missing_surname
    - name: check_missing_firstname
    - name: check_duplicate_initials
    - name: check_missing_corresponding
      dependencies:
        - '"Corresponding author?" %in% colnames(contributors_table)'
    - name: check_missing_email
      dependencies:
        - '"Corresponding author?" %in% colnames(contributors_table)'
        - 'self$results[["check_missing_corresponding"]]$type == "success"'
        - '"Email address" %in% colnames(contributors_table)'
    - name: check_duplicate_names
    - name: check_affiliation
    - name: check_affiliation_consistency
}

\strong{Dependencies}:
\itemize{
\item Some validation checks only run if other conditions are met.
\item Example: \code{check_missing_email} only runs if:
\enumerate{
\item \code{"Corresponding author?"} exists.
\item \code{check_missing_corresponding} has passed.
\item \code{"Email address"} is in the dataset.
}
}
}

\section{Integration}{

The class runs in the following order:
\enumerate{
\item \strong{Column validation} (via \code{ColumnValidator}).
\item \strong{If columns are valid} → Run content validation (via \code{Validator}).
\item \strong{If column validation fails} → Stop and return column validation errors.
}
}

\section{Usage}{

\preformatted{
# Load a validation configuration file
config_path <- "inst/config/title_validation.yaml"

# Create a ValidateOutput instance
validate_output <- ValidateOutput$new(config_path = config_path)

# Run validation on the contributors table
results <- validate_output$run_validations(contributors_table)
print(results)
}
}

\seealso{
\code{\link{ColumnValidator}}, \code{\link{Validator}}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{validator}}{Instance of the \code{Validator} class for data validation.}

\item{\code{column_validator}}{Instance of the \code{ColumnValidator} class for column validation.}

\item{\code{config}}{Stores the combined YAML validation configuration.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ValidateOutput-new}{\code{ValidateOutput$new()}}
\item \href{#method-ValidateOutput-run_validations}{\code{ValidateOutput$run_validations()}}
\item \href{#method-ValidateOutput-clone}{\code{ValidateOutput$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ValidateOutput-new"></a>}}
\if{latex}{\out{\hypertarget{method-ValidateOutput-new}{}}}
\subsection{Method \code{new()}}{
Initializes the \code{ValidateOutput} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateOutput$new(config_path)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config_path}}{Path to the YAML configuration file.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ValidateOutput-run_validations"></a>}}
\if{latex}{\out{\hypertarget{method-ValidateOutput-run_validations}{}}}
\subsection{Method \code{run_validations()}}{
Runs both column and data validation on a contributors table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateOutput$run_validations(contributors_table)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contributors_table}}{A dataframe containing contributor data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of validation results, each containing:
\itemize{
\item \code{type}: \code{"error"}, \code{"warning"}, or \code{"success"}.
\item \code{message}: A descriptive validation message.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ValidateOutput-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ValidateOutput-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateOutput$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
