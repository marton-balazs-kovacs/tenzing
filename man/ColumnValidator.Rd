% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ColumnValidator.R
\name{ColumnValidator}
\alias{ColumnValidator}
\title{ColumnValidator Class for Contributors Table}
\description{
ColumnValidator Class for Contributors Table

ColumnValidator Class for Contributors Table
}
\details{
The \code{ColumnValidator} class performs column-level validation for a contributors table.
It ensures that required columns exist, applying logical validation rules such as:
\itemize{
\item \strong{AND}: All listed columns must be present.
\item \strong{OR}: At least one of the listed columns must be present.
\item \strong{NOT}: None of the listed columns should be present.
}

This validation process is \strong{configurable} via a YAML file.
}
\section{Regex Matching}{

Some columns may follow a dynamic naming pattern (e.g., "Affiliation 1", "Affiliation 2").
The \code{regex} field in the YAML configuration allows \strong{pattern-based matching}.
}

\section{YAML Configuration}{

The validator reads a YAML file (e.g., \code{inst/config/columnvalidator_example.yaml}) that defines:
\itemize{
\item \strong{Rules} specifying required columns.
\item \strong{Operators} (\code{AND}, \code{OR}, \code{NOT}) for column validation.
\item \strong{Regex patterns} for dynamically named columns.
\item \strong{Severity levels} (\code{error} or \code{warning}).
}

Example:
\preformatted{
column_config:
  rules:
    minimal:
      operator: "AND"
      columns:
        - Firstname
        - Middle name
        - Surname
        - Order in publication
      severity: "error"

    affiliation:
      operator: "OR"  
      columns:
        - Primary affiliation
        - Secondary affiliation  
      regex: "^Affiliation [0-9]+$"
      severity: "error"

    title:
      operator: "AND"
      columns:
        - Corresponding author?
        - Email address
      severity: "warning"
}
}

\section{Integration with ValidateOutput}{

The \code{ValidateOutput} class initializes an instance of \code{ColumnValidator} to perform column checks.
If required columns are missing, the validation process halts, returning \strong{only column validation errors}.
}

\section{Usage}{

\preformatted{
# Load a column validation config
config <- yaml::read_yaml("inst/config/columnvalidator_example.yaml")

# Create a ColumnValidator instance
column_validator <- ColumnValidator$new(config_input = config$column_config)

# Validate a contributors table
results <- column_validator$validate_columns(contributors_table)
}
}

\seealso{
\code{\link{ValidateOutput}} which integrates this class for validation.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{config}}{Stores the column validation rules loaded from the YAML file.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ColumnValidator-new}{\code{ColumnValidator$new()}}
\item \href{#method-ColumnValidator-validate_columns}{\code{ColumnValidator$validate_columns()}}
\item \href{#method-ColumnValidator-check_rule}{\code{ColumnValidator$check_rule()}}
\item \href{#method-ColumnValidator-clone}{\code{ColumnValidator$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ColumnValidator-new"></a>}}
\if{latex}{\out{\hypertarget{method-ColumnValidator-new}{}}}
\subsection{Method \code{new()}}{
Initializes the \code{ColumnValidator} class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ColumnValidator$new(config_input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{config_input}}{A parsed YAML configuration containing column validation rules.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ColumnValidator-validate_columns"></a>}}
\if{latex}{\out{\hypertarget{method-ColumnValidator-validate_columns}{}}}
\subsection{Method \code{validate_columns()}}{
Validates columns in the provided contributors table.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ColumnValidator$validate_columns(contributors_table)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contributors_table}}{A dataframe containing contributor data.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of validation results, each containing:
\itemize{
\item \code{type}: \code{"error"}, \code{"warning"}, or \code{"success"}.
\item \code{message}: A descriptive validation message.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ColumnValidator-check_rule"></a>}}
\if{latex}{\out{\hypertarget{method-ColumnValidator-check_rule}{}}}
\subsection{Method \code{check_rule()}}{
Checks whether the contributors table satisfies a specific validation rule.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ColumnValidator$check_rule(contributors_table, rule, rule_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contributors_table}}{A dataframe containing contributor data.}

\item{\code{rule}}{A validation rule from the YAML configuration.}

\item{\code{rule_name}}{The name of the validation rule.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A validation result indicating whether the rule passed or failed.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ColumnValidator-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ColumnValidator-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ColumnValidator$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
